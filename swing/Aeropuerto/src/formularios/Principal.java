package formularios;

import clases.Aeropuerto;
import clases.AeropuertoPrivado;
import clases.AeropuertoPublico;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import utilidades.MetodosSueltos;
import utilidades.VariablesGlobales;

public class Principal extends javax.swing.JFrame {

 private DefaultTableModel modeloTabla;

 private final int PRIVADO = 1;
 private final int PUBLICO = 2;

 /*
        Añade un Jtable donde mostremos todos los aeropuertos disponibles en 
        nuestra lista. Rellenalos con la lista de aeropuertos
  */
 public Principal() {
  initComponents();
  this.setLocationRelativeTo(null);

  MetodosSueltos.leerAeropuertos(); // Relleno los aeropuertos del fichero en la lista

  if (this.rdbPublico.isSelected())
  {
   this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
  } else
  {
   this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
  }

 }

 public void cargarDatos(int tipo, String coincidenciaNombre) {

  this.modeloTabla = new DefaultTableModel() {
   @Override
   public boolean isCellEditable(int row, int column) {
    return false;
   }
  };

  this.tblAeropuertos.setModel(modeloTabla);
  //this.tblAeropuertos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

  int numeroColumnas = 0;

  modeloTabla.addColumn("ID");
  this.tblAeropuertos.getColumnModel().getColumn(0).setMinWidth(5);
  this.tblAeropuertos.getColumnModel().getColumn(0).setMaxWidth(5);

  modeloTabla.addColumn("Nombre");
  modeloTabla.addColumn("Pais");
  modeloTabla.addColumn("Numero");
  this.tblAeropuertos.getColumnModel().getColumn(3).setPreferredWidth(15);

  modeloTabla.addColumn("Calle");
  modeloTabla.addColumn("Ciudad");
  modeloTabla.addColumn("Año");
  this.tblAeropuertos.getColumnModel().getColumn(6).setPreferredWidth(15);

  modeloTabla.addColumn("Capacidad");
  this.tblAeropuertos.getColumnModel().getColumn(7).setPreferredWidth(15);

  if (tipo == PRIVADO)
  {
   modeloTabla.addColumn("Socios");
   numeroColumnas = 9;
  } else
  {
   modeloTabla.addColumn("Financiacion");
   modeloTabla.addColumn("Discapacitados");
   numeroColumnas = 10;
  }

  Object[] fila;

  for (Aeropuerto aux : VariablesGlobales.aeropuertos)
  {
   if (aux.getNombre().toLowerCase().contains(coincidenciaNombre.toLowerCase()))
   {
    fila = new Object[numeroColumnas];

    fila[0] = aux.getId();
    fila[1] = aux.getNombre();
    fila[2] = aux.getDireccion().getPais();
    fila[3] = aux.getDireccion().getNumero();
    fila[4] = aux.getDireccion().getCalle();
    fila[5] = aux.getDireccion().getCiudad();
    fila[6] = aux.getAnioInauguracion();
    fila[7] = aux.getCapacidad();

    // Filtramos segun sea un tipo u otro | privado o publico
    if (tipo == PRIVADO && aux instanceof AeropuertoPrivado)
    {
     AeropuertoPrivado ap = (AeropuertoPrivado) aux;
     fila[8] = ap.getNumSocios();

     modeloTabla.addRow(fila);
    } else if (tipo == PUBLICO && aux instanceof AeropuertoPublico)
    {
     AeropuertoPublico ap = (AeropuertoPublico) aux;
     fila[8] = ap.getFinanciacion();
     fila[9] = ap.getNumTrabajadoresDiscapacitados();

     modeloTabla.addRow(fila);
    }
   }

  }

 }

 public Aeropuerto buscarAeropuerto(int id) {
  Aeropuerto aeropuerto = null;
  for (Aeropuerto aux : VariablesGlobales.aeropuertos)
  {
   if (aux.getId() == id)
   {
    aeropuerto = aux;
   }
  }

  return aeropuerto;
 }

 /**
  * This method is called from within the constructor to initialize the form.
  * WARNING: Do NOT modify this code. The content of this method is always
  * regenerated by the Form Editor.
  */
 @SuppressWarnings("unchecked")
 // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
 private void initComponents() {

  buttonGroup1 = new javax.swing.ButtonGroup();
  jScrollPane1 = new javax.swing.JScrollPane();
  tblAeropuertos = new javax.swing.JTable();
  jLabel2 = new javax.swing.JLabel();
  rdbPrivado = new javax.swing.JRadioButton();
  rdbPublico = new javax.swing.JRadioButton();
  txtFiltroNombre = new javax.swing.JTextField();
  jLabel1 = new javax.swing.JLabel();
  jMenuBar1 = new javax.swing.JMenuBar();
  jMenu3 = new javax.swing.JMenu();
  jMenuItem1 = new javax.swing.JMenuItem();
  jMenuItem2 = new javax.swing.JMenuItem();
  jMenuItem3 = new javax.swing.JMenuItem();
  jMenuItem4 = new javax.swing.JMenuItem();
  jMenuItem5 = new javax.swing.JMenuItem();
  jMenu1 = new javax.swing.JMenu();
  jMenuItem6 = new javax.swing.JMenuItem();
  jMenuItem7 = new javax.swing.JMenuItem();
  jMenuItem8 = new javax.swing.JMenuItem();
  jMenu2 = new javax.swing.JMenu();

  setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

  tblAeropuertos.setModel(new javax.swing.table.DefaultTableModel(
   new Object [][] {
    {null, null, null, null},
    {null, null, null, null},
    {null, null, null, null},
    {null, null, null, null}
   },
   new String [] {
    "Title 1", "Title 2", "Title 3", "Title 4"
   }
  ));
  jScrollPane1.setViewportView(tblAeropuertos);

  jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  jLabel2.setText("Seleccione el tipo de aeropuerto:");

  buttonGroup1.add(rdbPrivado);
  rdbPrivado.setText("Privado");
  rdbPrivado.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    rdbPrivadoActionPerformed(evt);
   }
  });

  buttonGroup1.add(rdbPublico);
  rdbPublico.setSelected(true);
  rdbPublico.setText("Publico");
  rdbPublico.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    rdbPublicoActionPerformed(evt);
   }
  });

  txtFiltroNombre.addKeyListener(new java.awt.event.KeyAdapter() {
   public void keyPressed(java.awt.event.KeyEvent evt) {
    txtFiltroNombreKeyPressed(evt);
   }
  });

  jLabel1.setText("Buscar:");

  jMenu3.setText("Aeropuertos");

  jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
  jMenuItem1.setText("Añadir");
  jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem1ActionPerformed(evt);
   }
  });
  jMenu3.add(jMenuItem1);

  jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
  jMenuItem2.setText("Editar");
  jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem2ActionPerformed(evt);
   }
  });
  jMenu3.add(jMenuItem2);

  jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
  jMenuItem3.setText("Borrar");
  jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem3ActionPerformed(evt);
   }
  });
  jMenu3.add(jMenuItem3);

  jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
  jMenuItem4.setText("Ganancias");
  jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem4ActionPerformed(evt);
   }
  });
  jMenu3.add(jMenuItem4);

  jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
  jMenuItem5.setText("Mostrar información");
  jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem5ActionPerformed(evt);
   }
  });
  jMenu3.add(jMenuItem5);

  jMenuBar1.add(jMenu3);

  jMenu1.setText("Aviones");

  jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
  jMenuItem6.setText("Añadir...");
  jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem6ActionPerformed(evt);
   }
  });
  jMenu1.add(jMenuItem6);

  jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
  jMenuItem7.setText("Activar/Desactivar");
  jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem7ActionPerformed(evt);
   }
  });
  jMenu1.add(jMenuItem7);

  jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
  jMenuItem8.setText("Borrar...");
  jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenuItem8ActionPerformed(evt);
   }
  });
  jMenu1.add(jMenuItem8);

  jMenuBar1.add(jMenu1);

  jMenu2.setText("Salir");
  jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
   public void mouseClicked(java.awt.event.MouseEvent evt) {
    jMenu2MouseClicked(evt);
   }
  });
  jMenu2.addActionListener(new java.awt.event.ActionListener() {
   public void actionPerformed(java.awt.event.ActionEvent evt) {
    jMenu2ActionPerformed(evt);
   }
  });
  jMenuBar1.add(jMenu2);

  setJMenuBar(jMenuBar1);

  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(layout.createSequentialGroup()
    .addContainerGap()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addComponent(jScrollPane1)
     .addGroup(layout.createSequentialGroup()
      .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(rdbPrivado)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(rdbPublico)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 357, Short.MAX_VALUE)
      .addComponent(jLabel1)
      .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
      .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
    .addContainerGap())
  );
  layout.setVerticalGroup(
   layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
   .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
    .addContainerGap()
    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
      .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
      .addComponent(rdbPrivado)
      .addComponent(rdbPublico)
      .addComponent(txtFiltroNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
     .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
    .addContainerGap())
  );

  pack();
 }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
     if (this.tblAeropuertos.getSelectedRow() != -1)
     {

      int eleccion = JOptionPane.showConfirmDialog(this, "¿Quieres boorar el aeropuerto?", "Confirmacion", JOptionPane.YES_NO_OPTION);

      if (eleccion == JOptionPane.YES_OPTION)
      {
       // Eliminar un aeropuerto
       // Recogemos el ID
       // La fila que se recupera, y la columna 
       // Que en este caso queremos el ID por lo tanto es la columna 0
       int fila = this.tblAeropuertos.getSelectedRow();
       int id = (int) this.tblAeropuertos.getValueAt(fila, 0);

       Aeropuerto AeropuertoBorrar = buscarAeropuerto(id);

       VariablesGlobales.aeropuertos.remove(AeropuertoBorrar);
      }

      try
      {
       MetodosSueltos.actualizarFichero();

       if (this.rdbPublico.isSelected())
       {
        this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
       } else
       {
        this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
       }
      } catch (IOException ex)
      {
       Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
      }

     } else
     {
      JOptionPane.showMessageDialog(this, "No hay filas seleccionadas", "Error", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
     // abrimos la ventana para activar/desactivar un avion
     if (VariablesGlobales.aeropuertos.size() > 0)
     {
      GestionarAviones ventana = new GestionarAviones(this, true, false);
      ventana.setVisible(true);
     } else
     {
      JOptionPane.showMessageDialog(this, "No hay aeropuertos", "Error", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed

    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
     System.exit(0);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

     AniadirEditarAeropuerto ventana = new AniadirEditarAeropuerto(this, true);
     ventana.setVisible(true);

     if (this.rdbPublico.isSelected())
     {
      this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
     } else
     {
      this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
     }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

 private void rdbPrivadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPrivadoActionPerformed
  // Evento para cargar el metodo para refrescar los aeropuertos
  // Enviando un parametro al metodo
  this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
 }//GEN-LAST:event_rdbPrivadoActionPerformed

 private void rdbPublicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPublicoActionPerformed
  // Evento para cargar el metodo para refrescar los aeropuertos
  // Enviando un parametro al metodo
  this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
 }//GEN-LAST:event_rdbPublicoActionPerformed

 private void txtFiltroNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroNombreKeyPressed
  // Ajustar el buscador
  if (this.rdbPublico.isSelected())
  {
   this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
  } else
  {
   this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
  }
 }//GEN-LAST:event_txtFiltroNombreKeyPressed

 private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

  if (this.tblAeropuertos.getSelectedRow() != -1)
  {
   // Recogemos el ID
   // La fila que se recupera, y la columna 
   // Que en este caso queremos el ID por lo tanto es la columna 0
   int fila = this.tblAeropuertos.getSelectedRow();
   int id = (int) this.tblAeropuertos.getValueAt(fila, 0);

   Aeropuerto AeropuertoMostrar = buscarAeropuerto(id);

   AniadirEditarAeropuerto ventana = new AniadirEditarAeropuerto(this, true, AeropuertoMostrar);
   ventana.setVisible(true);

   if (this.rdbPublico.isSelected())
   {
    this.cargarDatos(PUBLICO, this.txtFiltroNombre.getText());
   } else
   {
    this.cargarDatos(PRIVADO, this.txtFiltroNombre.getText());
   }

  } else
  {
   JOptionPane.showMessageDialog(this, "No hay filas seleccionadas", "Error", JOptionPane.ERROR_MESSAGE);
  }

 }//GEN-LAST:event_jMenuItem2ActionPerformed

 private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
  // Mostrar informacion de cada aeropuerto
  if (this.tblAeropuertos.getSelectedRow() != -1)
  {
   // Recogemos el ID
   // La fila que se recupera, y la columna 
   // Que en este caso queremos el ID por lo tanto es la columna 0
   int fila = this.tblAeropuertos.getSelectedRow();
   int id = (int) this.tblAeropuertos.getValueAt(fila, 0);

   Aeropuerto AeropuertoInfo = buscarAeropuerto(id);

   JOptionPane.showMessageDialog(this, AeropuertoInfo.toString(), "Información", JOptionPane.INFORMATION_MESSAGE);

  } else
  {
   JOptionPane.showMessageDialog(this, "No hay fila seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
  }
 }//GEN-LAST:event_jMenuItem5ActionPerformed

 private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
  // Ganancias
  // Mostrar informacion de cada aeropuerto en ganancias
  if (this.tblAeropuertos.getSelectedRow() != -1)
  {
   // Recogemos el ID
   // La fila que se recupera, y la columna 
   // Que en este caso queremos el ID por lo tanto es la columna 0
   int fila = this.tblAeropuertos.getSelectedRow();
   int id = (int) this.tblAeropuertos.getValueAt(fila, 0);

   Aeropuerto AeropuertoInfo = buscarAeropuerto(id);

   String gananciasText = JOptionPane.showInputDialog(this, "Introduce las ganancias", "Ganancias", JOptionPane.INFORMATION_MESSAGE);

   if (MetodosSueltos.validaNumeroReal_Exp(gananciasText))
   {
    Double ganancias = Double.parseDouble(gananciasText);
    JOptionPane.showMessageDialog(this, AeropuertoInfo.gananciasTotales(ganancias), "Información", JOptionPane.INFORMATION_MESSAGE);
   } else
   {
    JOptionPane.showMessageDialog(this, "La ganancia introduccida no es valida", "Error", JOptionPane.ERROR_MESSAGE);
   }

  } else
  {
   JOptionPane.showMessageDialog(this, "No hay fila seleccionada", "Error", JOptionPane.ERROR_MESSAGE);
  }
 }//GEN-LAST:event_jMenuItem4ActionPerformed

 private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
  // abrimos la ventana para añadir un avion
  if (VariablesGlobales.aeropuertos.size() > 0)
  {
   AniadirAvion ventana = new AniadirAvion(this, true);
   ventana.setVisible(true);
  } else
  {
   JOptionPane.showMessageDialog(this, "No hay aeropuertos a los que añadir aviones", "Error", JOptionPane.ERROR_MESSAGE);
  }

 }//GEN-LAST:event_jMenuItem6ActionPerformed

 private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
  // abrimos la ventana para activar/desactivar un avion
  if (VariablesGlobales.aeropuertos.size() > 0)
  {
   GestionarAviones ventana = new GestionarAviones(this, true, true);
   ventana.setVisible(true);
  } else
  {
   JOptionPane.showMessageDialog(this, "No hay aeropuertos", "Error", JOptionPane.ERROR_MESSAGE);
  }

 }//GEN-LAST:event_jMenuItem7ActionPerformed


 // Variables declaration - do not modify//GEN-BEGIN:variables
 private javax.swing.ButtonGroup buttonGroup1;
 private javax.swing.JLabel jLabel1;
 private javax.swing.JLabel jLabel2;
 private javax.swing.JMenu jMenu1;
 private javax.swing.JMenu jMenu2;
 private javax.swing.JMenu jMenu3;
 private javax.swing.JMenuBar jMenuBar1;
 private javax.swing.JMenuItem jMenuItem1;
 private javax.swing.JMenuItem jMenuItem2;
 private javax.swing.JMenuItem jMenuItem3;
 private javax.swing.JMenuItem jMenuItem4;
 private javax.swing.JMenuItem jMenuItem5;
 private javax.swing.JMenuItem jMenuItem6;
 private javax.swing.JMenuItem jMenuItem7;
 private javax.swing.JMenuItem jMenuItem8;
 private javax.swing.JScrollPane jScrollPane1;
 private javax.swing.JRadioButton rdbPrivado;
 private javax.swing.JRadioButton rdbPublico;
 private javax.swing.JTable tblAeropuertos;
 private javax.swing.JTextField txtFiltroNombre;
 // End of variables declaration//GEN-END:variables
}
